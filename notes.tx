
Benefits of Django: 
(go through notion notes)

- Forms: simplifies form creation, validation, and processing (and secure)
- User Auth and authorization: robust and built with security in mind
- Caching(store to local memory for faster access)
cache search terms - saves what you searched because your more likely to search again so faster and saves money
-admin site: 
-serializing data: Django makes it easy to serve your data as JSON


create a directory 
in the directory - django-admin startproject <projectname> . 
pipenv shell - to activate

django-admin startapp main_app - to create main_app
deactivate and exit - always after ending session
pipenv install django psycopg2-binary psycopg2
add 'main_app', to Installed_apps in settings.py
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgressql',
        'NAME': BASE_DIR / 'spotify_django',
    }
}
python3 manage.py migrate - if error, database doesnt exist
createdb spotify
python3 manage.py migrate

These files are:

The outer spotify_project: /root directory is a container for your project. Its name doesn’t matter to Django; 
you can rename it to anything you like.

manage.py: A command-line utility that lets you interact with this Django project in various ways. You can read all 
the details about manage.py in django-admin and manage.py.

The inner mysite/ directory is the actual Python package for your project. Its name is the Python package 
name you’ll need to use to import anything inside it (e.g. mysite.urls).

mysite/__init__.py: An empty file that tells Python that this directory should be considered a Python package. If you’re a Python beginner, read more about packages in the official Python docs.

mysite/settings.py: Settings/configuration for this Django project. Django settings will tell you all about how settings work.

mysite/urls.py: The URL declarations for this Django project; a “table of contents” of your Django-powered site. You can read more about URLs in URL dispatcher.

mysite/asgi.py: An entry-point for ASGI-compatible web servers to serve your project. See How to deploy with ASGI for more details.

mysite/wsgi.py: An entry-point for WSGI-compatible web servers to serve your project. See How to deploy with WSGI for more details.

Pipfile - similar to Package.JSON

python3 manage.py runserver